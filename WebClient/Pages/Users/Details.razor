@page "/users/{Id:int}"

@inject IApiHttpClient apiHttpClient
@inject INotificationService notificationService

<Div Padding="Padding.Is3.OnX" Margin="Margin.Is4.FromBottom">
    <Heading Size="HeadingSize.Is4">Информация о пользователе</Heading>
    @if (user != null)
    {
        <Heading Size="HeadingSize.Is5">@user.FullName (@user.Email)</Heading>
    }
    else
    {
        <Heading Size="HeadingSize.Is5">Нет пользователя</Heading>
    }
</Div>

<Div Padding="Padding.Is3.OnX">
    <Div Flex="Flex.Row.AlignItems.Center">
        <Heading Flex="Flex.Shrink.Is1.Grow.Is1" 
                 Size="HeadingSize.Is5" 
                 Margin="Margin.Is0" 
                 Style="font-weight: 500;">Отчеты</Heading>

        <Button Color="Color.Primary" Clicked="_ => reportsDataGrid.New()">
            <Icon Name="IconName.Add" Style="margin-right: 0.25rem" />
            <Span>Добавить</Span>
        </Button>
    </Div>

    <DataGrid @ref="reportsDataGrid"
              TItem="Report"
              Data="model.Items"
              TotalItems="model.Count"
              ShowPager="true"
              ReadData="OnReadData"
              NewItemDefaultSetter="SetReportValues"
              Editable="true"
              EditMode="DataGridEditMode.Popup"
              RowInserting="OnRowInserting"
              RowUpdating="OnRowUpdating"
              RowRemoving="OnRowRemoving">
        <DataGridColumns>
            <DataGridColumn TItem="Report" Field="Id" Caption="Идентификатор" Width="150px"></DataGridColumn>
            <DataGridColumn TItem="Report" Field="CreatedDate" Caption="Дата добавления" Width="150px"></DataGridColumn>
            <DataGridColumn TItem="Report" Field="NumberOfHours" Caption="Количество часов" Editable="true" Width="150px"></DataGridColumn>
            <DataGridColumn TItem="Report" Field="Remark" Caption="Примечание" Editable="true"></DataGridColumn>
            <DataGridCommandColumn TItem="Report" NewCommandAllowed="false" Width="110px">
                <EditCommandTemplate>
                    <Button Color="Color.Primary" Outline="true" Clicked="context.Clicked" Style="margin-right: 0.25rem;">
                        <Icon Name="IconName.Edit" />
                    </Button>
                </EditCommandTemplate>
                <DeleteCommandTemplate>
                    <Button Color="Color.Danger" Outline="true" Clicked="context.Clicked">
                        <Icon Name="IconName.Delete" />
                    </Button>
                </DeleteCommandTemplate>
                <SaveCommandTemplate>
                    <Button Color="Color.Primary" Clicked="@context.Clicked">Сохранить</Button>
                </SaveCommandTemplate>
                <CancelCommandTemplate>
                    <Button Color="Color.Secondary" Clicked="@context.Clicked">Отмена</Button>
                </CancelCommandTemplate>
            </DataGridCommandColumn>
        </DataGridColumns>
        <EmptyTemplate>
            <Text Alignment="TextAlignment.Center" TextAlignment="TextAlignment.Center">Нет данных</Text>
        </EmptyTemplate>
        <LoadingTemplate>
            <SpinKit Type="SpinKitType.Pulse" Centered="true" />
        </LoadingTemplate>
        <PopupTitleTemplate Context="context">
            @GetPopupTitle(context.EditState, context.Item)
        </PopupTitleTemplate>
    </DataGrid>
</Div>

@code {
    [Parameter]
    public int Id { get; set; }

    private User user;

    private PagingModel<Report> model = new PagingModel<Report>();

    private DataGrid<Report> reportsDataGrid;

    protected override async Task OnInitializedAsync()
    {
        user = await apiHttpClient.GetUserByIdAsync(Id);
    }

    private string GetPopupTitle(DataGridEditState editState, Report report)
    {
        if (editState == DataGridEditState.New)
        {
            return "Добавление отчета";
        }

        if (editState == DataGridEditState.Edit)
        {
            return string.Format("Редактирование отчета #{0}", report.Id);
        }

        if (editState == DataGridEditState.None)
        {
            return string.Format("Отчет #{0}", report.Id);
        }

        throw new NotSupportedException("Недопустимое состояние");
    }

    private async Task OnReadData(DataGridReadDataEventArgs<Report> e)
    {
        model = await apiHttpClient.GetUserReportsAsync(Id, e.Page, e.PageSize);

        StateHasChanged();
    }

    private async Task OnRowInserting(CancellableRowChange<Report, Dictionary<string, object>> context)
    {
        var report = context.Item.Clone().FillObjectProperty(context.Values);

        var insertResult = await apiHttpClient.InsertReportAsync(report);

        if (!insertResult.Success)
        {
            context.Cancel = true;

            await notificationService.Error(insertResult.ErrorMessage);
        }
    }

    private async Task OnRowUpdating(CancellableRowChange<Report, Dictionary<string, object>> context)
    {
        var report = context.Item.Clone().FillObjectProperty(context.Values);

        var updated = await apiHttpClient.UpdateReportAsync(report);

        context.Cancel = !updated;
    }

    private async Task OnRowRemoving(CancellableRowChange<Report> context)
    {
        var deleted = await apiHttpClient.RemoveReportAsync(context.Item);

        context.Cancel = !deleted;
    }

    private void SetReportValues(Report report)
    {
        report.UserId = Id;
        report.CreatedDate = DateTime.Now;
    }
}
